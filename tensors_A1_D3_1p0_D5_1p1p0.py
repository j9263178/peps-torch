import torch

def fill_from_sparse_coo(t,elems):
    """
    :param elems: non-zero elements defined in COO format (tuple(indices),value)
    :type elems: list[tuple(tuple(int),value)]
    """
    for e in elems:
        t[e[0]]=e[1]
    return t

def get_SU2_symT_D3_1p0_coo():
    """
    :return tensors_coo: returns a list of tensors in COO sparse representation.
                         Each tensor is described as a dict of metadata string
                         and a list of non-zero elements. 
    :rtype tensors: list(tuple(dict(str,str),list(tuple(tuple(int),value))))
    """
    tensors_coo=[]

    T_13_A1_1_metadata=dict({"name": "T_13_A1_1", "irreps": "(1,0)", \
        "occupations":"(1,3)", "pg":"A_1"})
    el=[((0,0,2,2,2),1/2),\
    ((0,2,0,2,2),1/2),\
    ((0,2,2,0,2),1/2),\
    ((0,2,2,2,0),1/2),\
    ((1,1,2,2,2),1/2),\
    ((1,2,1,2,2),1/2),\
    ((1,2,2,1,2),1/2),\
    ((1,2,2,2,1),1/2)]
    tensors_coo.append((T_13_A1_1_metadata,el))

    T_31_A1_1_metadata=dict({"name": "T_31_A1_1", "irreps": "(1,0)", \
        "occupations":"(3,1)", "pg":"A_1"})
    el=[((0,0,0,1,2),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,0,2,1),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,1,0,2),-1 * ( 6 )**( -1/2 )),\
    ((0,0,1,2,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,2,0,1),-1 * ( 6 )**( -1/2 )),\
    ((0,0,2,1,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,1,0,0,2),1/2 * ( 6 )**( -1/2 )),\
    ((0,1,0,2,0),-1 * ( 6 )**( -1/2 )),\
    ((0,1,2,0,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,2,0,0,1),1/2 * ( 6 )**( -1/2 )),\
    ((0,2,0,1,0),-1 * ( 6 )**( -1/2 )),\
    ((0,2,1,0,0),1/2 * ( 6 )**( -1/2 )),\
    ((1,0,1,1,2),-1/2 * ( 6 )**( -1/2 )),\
    ((1,0,1,2,1),( 6 )**( -1/2 )),\
    ((1,0,2,1,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,0,1,2),( 6 )**( -1/2 )),\
    ((1,1,0,2,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,1,0,2),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,1,2,0),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,2,0,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,2,1,0),( 6 )**( -1/2 )),\
    ((1,2,0,1,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,2,1,0,1),( 6 )**( -1/2 )),\
    ((1,2,1,1,0),-1/2 * ( 6 )**( -1/2 ))]
    tensors_coo.append((T_31_A1_1_metadata,el))

    return tensors_coo

def get_SU2_symT_D3_1p0(dtype=torch.float64, device='cpu'):
    pd=2
    D=3
    dims=(pd,D,D,D,D)
    tensors=[]

    tensors_coo= get_SU2_symT_D3_1p0_coo()
    for tcoo in tensors_coo:
        t= torch.zeros(dims, dtype=dtype, device=device)
        t= fill_from_sparse_coo(t, tcoo[1])
        tensors.append((tcoo[0],t))

    return tensors

def get_SU2_symT_D5_1p1p0_coo():
    """
    :return tensors_coo: returns a list of tensors in COO sparse representation.
                         Each tensor is described as a dict of metadata string
                         and a list of non-zero elements. 
    :rtype tensors: list(tuple(dict(str,str),list(tuple(tuple(int),value))))
    """
    tensors_coo=[]

    T_103_A1_1_metadata=dict({"name": "T_103_A1_1", "irreps": "(1,1,0)", \
        "occupations":"(3,0,1)", "pg":"A_1"})
    el=[((0,0,4,4,4),1/2),\
    ((0,4,0,4,4),1/2),\
    ((0,4,4,0,4),1/2),\
    ((0,4,4,4,0),1/2),\
    ((1,1,4,4,4),1/2),\
    ((1,4,1,4,4),1/2),\
    ((1,4,4,1,4),1/2),\
    ((1,4,4,4,1),1/2)]
    tensors_coo.append((T_103_A1_1_metadata,el))

    T_301_A1_1_metadata=dict({"name": "T_301_A1_1", "irreps": "(1,1,0)", \
        "occupations":"(3,0,1)", "pg":"A_1"})
    el=[((0,0,0,1,4),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,0,4,1),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,1,0,4),-1 * ( 6 )**( -1/2 )),\
    ((0,0,1,4,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,4,0,1),-1 * ( 6 )**( -1/2 )),\
    ((0,0,4,1,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,1,0,0,4),1/2 * ( 6 )**( -1/2 )),\
    ((0,1,0,4,0),-1 * ( 6 )**( -1/2 )),\
    ((0,1,4,0,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,4,0,0,1),1/2 * ( 6 )**( -1/2 )),\
    ((0,4,0,1,0),-1 * ( 6 )**( -1/2 )),\
    ((0,4,1,0,0),1/2 * ( 6 )**( -1/2 )),\
    ((1,0,1,1,4),-1/2 * ( 6 )**( -1/2 )),\
    ((1,0,1,4,1),( 6 )**( -1/2 )),\
    ((1,0,4,1,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,0,1,4),( 6 )**( -1/2 )),\
    ((1,1,0,4,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,1,0,4),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,1,4,0),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,4,0,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,4,1,0),( 6 )**( -1/2 )),\
    ((1,4,0,1,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,4,1,0,1),( 6 )**( -1/2 )),\
    ((1,4,1,1,0),-1/2 * ( 6 )**( -1/2 ))]
    tensors_coo.append((T_301_A1_1_metadata,el))

    T_121_A1_1_metadata=dict({"name": "T_121_A1_1", "irreps": "(1,1,0)", \
        "occupations":"(1,2,1)", "pg":"A_1"})
    el=[((0,0,2,3,4),1/4 * ( 3 )**( -1/2 )),\
    ((0,0,3,2,4),-1/2 * ( 3 )**( -1/2 )),\
    ((0,0,4,2,3),-1/2 * ( 3 )**( -1/2 )),\
    ((0,0,4,3,2),1/4 * ( 3 )**( -1/2 )),\
    ((0,1,2,2,4),1/4 * ( 3 )**( -1/2 )),\
    ((0,1,4,2,2),1/4 * ( 3 )**( -1/2 )),\
    ((0,2,0,4,3),1/4 * ( 3 )**( -1/2 )),\
    ((0,2,1,4,2),1/4 * ( 3 )**( -1/2 )),\
    ((0,2,2,1,4),1/4 * ( 3 )**( -1/2 )),\
    ((0,2,2,4,1),1/4 * ( 3 )**( -1/2 )),\
    ((0,2,3,0,4),-1/2 * ( 3 )**( -1/2 )),\
    ((0,2,3,4,0),1/4 * ( 3 )**( -1/2 )),\
    ((0,2,4,0,3),-1/2 * ( 3 )**( -1/2 )),\
    ((0,2,4,1,2),1/4 * ( 3 )**( -1/2 )),\
    ((0,3,0,4,2),-1/2 * ( 3 )**( -1/2 )),\
    ((0,3,2,0,4),1/4 * ( 3 )**( -1/2 )),\
    ((0,3,2,4,0),-1/2 * ( 3 )**( -1/2 )),\
    ((0,3,4,0,2),1/4 * ( 3 )**( -1/2 )),\
    ((0,4,0,2,3),1/4 * ( 3 )**( -1/2 )),\
    ((0,4,0,3,2),-1/2 * ( 3 )**( -1/2 )),\
    ((0,4,1,2,2),1/4 * ( 3 )**( -1/2 )),\
    ((0,4,2,2,1),1/4 * ( 3 )**( -1/2 )),\
    ((0,4,2,3,0),-1/2 * ( 3 )**( -1/2 )),\
    ((0,4,3,2,0),1/4 * ( 3 )**( -1/2 )),\
    ((1,0,3,3,4),-1/4 * ( 3 )**( -1/2 )),\
    ((1,0,4,3,3),-1/4 * ( 3 )**( -1/2 )),\
    ((1,1,2,3,4),1/2 * ( 3 )**( -1/2 )),\
    ((1,1,3,2,4),-1/4 * ( 3 )**( -1/2 )),\
    ((1,1,4,2,3),-1/4 * ( 3 )**( -1/2 )),\
    ((1,1,4,3,2),1/2 * ( 3 )**( -1/2 )),\
    ((1,2,1,4,3),1/2 * ( 3 )**( -1/2 )),\
    ((1,2,3,1,4),-1/4 * ( 3 )**( -1/2 )),\
    ((1,2,3,4,1),1/2 * ( 3 )**( -1/2 )),\
    ((1,2,4,1,3),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,0,4,3),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,1,4,2),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,2,1,4),1/2 * ( 3 )**( -1/2 )),\
    ((1,3,2,4,1),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,3,0,4),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,3,4,0),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,4,0,3),-1/4 * ( 3 )**( -1/2 )),\
    ((1,3,4,1,2),1/2 * ( 3 )**( -1/2 )),\
    ((1,4,0,3,3),-1/4 * ( 3 )**( -1/2 )),\
    ((1,4,1,2,3),1/2 * ( 3 )**( -1/2 )),\
    ((1,4,1,3,2),-1/4 * ( 3 )**( -1/2 )),\
    ((1,4,2,3,1),-1/4 * ( 3 )**( -1/2 )),\
    ((1,4,3,2,1),1/2 * ( 3 )**( -1/2 )),\
    ((1,4,3,3,0),-1/4 * ( 3 )**( -1/2 ))]
    tensors_coo.append((T_121_A1_1_metadata,el))

    T_121_A1_2_metadata=dict({"name": "T_121_A1_2", "irreps": "(1,1,0)", \
        "occupations":"(1,2,1)", "pg":"A_1"})
    el=[((0,0,2,4,3),-1/2 * ( 6 )**( -1/2 )),\
    ((0,0,3,4,2),-1/2 * ( 6 )**( -1/2 )),\
    ((0,1,2,4,2),( 6 )**( -1/2 )),\
    ((0,2,0,3,4),-1/2 * ( 6 )**( -1/2 )),\
    ((0,2,1,2,4),( 6 )**( -1/2 )),\
    ((0,2,4,2,1),( 6 )**( -1/2 )),\
    ((0,2,4,3,0),-1/2 * ( 6 )**( -1/2 )),\
    ((0,3,0,2,4),-1/2 * ( 6 )**( -1/2 )),\
    ((0,3,4,2,0),-1/2 * ( 6 )**( -1/2 )),\
    ((0,4,2,0,3),-1/2 * ( 6 )**( -1/2 )),\
    ((0,4,2,1,2),( 6 )**( -1/2 )),\
    ((0,4,3,0,2),-1/2 * ( 6 )**( -1/2 )),\
    ((1,0,3,4,3),-1 * ( 6 )**( -1/2 )),\
    ((1,1,2,4,3),1/2 * ( 6 )**( -1/2 )),\
    ((1,1,3,4,2),1/2 * ( 6 )**( -1/2 )),\
    ((1,2,1,3,4),1/2 * ( 6 )**( -1/2 )),\
    ((1,2,4,3,1),1/2 * ( 6 )**( -1/2 )),\
    ((1,3,0,3,4),-1 * ( 6 )**( -1/2 )),\
    ((1,3,1,2,4),1/2 * ( 6 )**( -1/2 )),\
    ((1,3,4,2,1),1/2 * ( 6 )**( -1/2 )),\
    ((1,3,4,3,0),-1 * ( 6 )**( -1/2 )),\
    ((1,4,2,1,3),1/2 * ( 6 )**( -1/2 )),\
    ((1,4,3,0,3),-1 * ( 6 )**( -1/2 )),\
    ((1,4,3,1,2),1/2 * ( 6 )**( -1/2 ))]
    tensors_coo.append((T_121_A1_2_metadata,el))

    T_121_A1_3_metadata=dict({"name": "T_121_A1_3", "irreps": "(1,1,0)", \
        "occupations":"(1,2,1)", "pg":"A_1"})
    el=[((0,0,2,3,4),-1/4),\
    ((0,0,4,3,2),-1/4),\
    ((0,1,2,2,4),1/4),\
    ((0,1,4,2,2),1/4),\
    ((0,2,0,4,3),-1/4),\
    ((0,2,1,4,2),1/4),\
    ((0,2,2,1,4),1/4),\
    ((0,2,2,4,1),1/4),\
    ((0,2,3,4,0),-1/4),\
    ((0,2,4,1,2),1/4),\
    ((0,3,2,0,4),-1/4),\
    ((0,3,4,0,2),-1/4),\
    ((0,4,0,2,3),-1/4),\
    ((0,4,1,2,2),1/4),\
    ((0,4,2,2,1),1/4),\
    ((0,4,3,2,0),-1/4),\
    ((1,0,3,3,4),-1/4),\
    ((1,0,4,3,3),-1/4),\
    ((1,1,3,2,4),1/4),\
    ((1,1,4,2,3),1/4),\
    ((1,2,3,1,4),1/4),\
    ((1,2,4,1,3),1/4),\
    ((1,3,0,4,3),-1/4),\
    ((1,3,1,4,2),1/4),\
    ((1,3,2,4,1),1/4),\
    ((1,3,3,0,4),-1/4),\
    ((1,3,3,4,0),-1/4),\
    ((1,3,4,0,3),-1/4),\
    ((1,4,0,3,3),-1/4),\
    ((1,4,1,3,2),1/4),\
    ((1,4,2,3,1),1/4),\
    ((1,4,3,3,0),-1/4)]
    tensors_coo.append((T_121_A1_3_metadata,el))

    T_211_A1_1_metadata=dict({"name": "T_211_A1_1", "irreps": "(1,1,0)", \
        "occupations":"(2,1,1)", "pg":"A_1"})
    el=[((0,0,0,3,4),1/2 * ( 3 )**( -1/2 )),\
    ((0,0,0,4,3),1/2 * ( 3 )**( -1/2 )),\
    ((0,0,1,2,4),-1/4 * ( 3 )**( -1/2 )),\
    ((0,0,1,4,2),-1/4 * ( 3 )**( -1/2 )),\
    ((0,0,2,4,1),-1/4 * ( 3 )**( -1/2 )),\
    ((0,0,3,4,0),1/2 * ( 3 )**( -1/2 )),\
    ((0,0,4,2,1),-1/4 * ( 3 )**( -1/2 )),\
    ((0,0,4,3,0),1/2 * ( 3 )**( -1/2 )),\
    ((0,1,0,2,4),-1/4 * ( 3 )**( -1/2 )),\
    ((0,1,0,4,2),-1/4 * ( 3 )**( -1/2 )),\
    ((0,1,2,4,0),-1/4 * ( 3 )**( -1/2 )),\
    ((0,1,4,2,0),-1/4 * ( 3 )**( -1/2 )),\
    ((0,2,0,1,4),-1/4 * ( 3 )**( -1/2 )),\
    ((0,2,1,0,4),-1/4 * ( 3 )**( -1/2 )),\
    ((0,2,4,0,1),-1/4 * ( 3 )**( -1/2 )),\
    ((0,2,4,1,0),-1/4 * ( 3 )**( -1/2 )),\
    ((0,3,0,0,4),1/2 * ( 3 )**( -1/2 )),\
    ((0,3,4,0,0),1/2 * ( 3 )**( -1/2 )),\
    ((0,4,0,0,3),1/2 * ( 3 )**( -1/2 )),\
    ((0,4,0,1,2),-1/4 * ( 3 )**( -1/2 )),\
    ((0,4,1,0,2),-1/4 * ( 3 )**( -1/2 )),\
    ((0,4,2,0,1),-1/4 * ( 3 )**( -1/2 )),\
    ((0,4,2,1,0),-1/4 * ( 3 )**( -1/2 )),\
    ((0,4,3,0,0),1/2 * ( 3 )**( -1/2 )),\
    ((1,0,1,3,4),1/4 * ( 3 )**( -1/2 )),\
    ((1,0,1,4,3),1/4 * ( 3 )**( -1/2 )),\
    ((1,0,3,4,1),1/4 * ( 3 )**( -1/2 )),\
    ((1,0,4,3,1),1/4 * ( 3 )**( -1/2 )),\
    ((1,1,0,3,4),1/4 * ( 3 )**( -1/2 )),\
    ((1,1,0,4,3),1/4 * ( 3 )**( -1/2 )),\
    ((1,1,1,2,4),-1/2 * ( 3 )**( -1/2 )),\
    ((1,1,1,4,2),-1/2 * ( 3 )**( -1/2 )),\
    ((1,1,2,4,1),-1/2 * ( 3 )**( -1/2 )),\
    ((1,1,3,4,0),1/4 * ( 3 )**( -1/2 )),\
    ((1,1,4,2,1),-1/2 * ( 3 )**( -1/2 )),\
    ((1,1,4,3,0),1/4 * ( 3 )**( -1/2 )),\
    ((1,2,1,1,4),-1/2 * ( 3 )**( -1/2 )),\
    ((1,2,4,1,1),-1/2 * ( 3 )**( -1/2 )),\
    ((1,3,0,1,4),1/4 * ( 3 )**( -1/2 )),\
    ((1,3,1,0,4),1/4 * ( 3 )**( -1/2 )),\
    ((1,3,4,0,1),1/4 * ( 3 )**( -1/2 )),\
    ((1,3,4,1,0),1/4 * ( 3 )**( -1/2 )),\
    ((1,4,0,1,3),1/4 * ( 3 )**( -1/2 )),\
    ((1,4,1,0,3),1/4 * ( 3 )**( -1/2 )),\
    ((1,4,1,1,2),-1/2 * ( 3 )**( -1/2 )),\
    ((1,4,2,1,1),-1/2 * ( 3 )**( -1/2 )),\
    ((1,4,3,0,1),1/4 * ( 3 )**( -1/2 )),\
    ((1,4,3,1,0),1/4 * ( 3 )**( -1/2 ))]
    tensors_coo.append((T_211_A1_1_metadata,el))

    T_211_A1_2_metadata=dict({"name": "T_211_A1_2", "irreps": "(1,1,0)", \
        "occupations":"(2,1,1)", "pg":"A_1"})
    el=[((0,0,2,1,4),1/2 * ( 6 )**( -1/2 )),\
    ((0,0,3,0,4),-1 * ( 6 )**( -1/2 )),\
    ((0,0,4,0,3),-1 * ( 6 )**( -1/2 )),\
    ((0,0,4,1,2),1/2 * ( 6 )**( -1/2 )),\
    ((0,1,2,0,4),1/2 * ( 6 )**( -1/2 )),\
    ((0,1,4,0,2),1/2 * ( 6 )**( -1/2 )),\
    ((0,2,0,4,1),1/2 * ( 6 )**( -1/2 )),\
    ((0,2,1,4,0),1/2 * ( 6 )**( -1/2 )),\
    ((0,3,0,4,0),-1 * ( 6 )**( -1/2 )),\
    ((0,4,0,2,1),1/2 * ( 6 )**( -1/2 )),\
    ((0,4,0,3,0),-1 * ( 6 )**( -1/2 )),\
    ((0,4,1,2,0),1/2 * ( 6 )**( -1/2 )),\
    ((1,0,3,1,4),-1/2 * ( 6 )**( -1/2 )),\
    ((1,0,4,1,3),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,2,1,4),( 6 )**( -1/2 )),\
    ((1,1,3,0,4),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,4,0,3),-1/2 * ( 6 )**( -1/2 )),\
    ((1,1,4,1,2),( 6 )**( -1/2 )),\
    ((1,2,1,4,1),( 6 )**( -1/2 )),\
    ((1,3,0,4,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,3,1,4,0),-1/2 * ( 6 )**( -1/2 )),\
    ((1,4,0,3,1),-1/2 * ( 6 )**( -1/2 )),\
    ((1,4,1,2,1),( 6 )**( -1/2 )),\
    ((1,4,1,3,0),-1/2 * ( 6 )**( -1/2 ))]
    tensors_coo.append((T_211_A1_2_metadata,el))

    T_211_A1_3_metadata=dict({"name": "T_211_A1_3", "irreps": "(1,1,0)", \
        "occupations":"(2,1,1)", "pg":"A_1"})
    el=[((0,0,1,2,4),-1/4),\
    ((0,0,1,4,2),1/4),\
    ((0,0,2,4,1),1/4),\
    ((0,0,4,2,1),-1/4),\
    ((0,1,0,2,4),1/4),\
    ((0,1,0,4,2),-1/4),\
    ((0,1,2,4,0),-1/4),\
    ((0,1,4,2,0),1/4),\
    ((0,2,0,1,4),1/4),\
    ((0,2,1,0,4),-1/4),\
    ((0,2,4,0,1),-1/4),\
    ((0,2,4,1,0),1/4),\
    ((0,4,0,1,2),-1/4),\
    ((0,4,1,0,2),1/4),\
    ((0,4,2,0,1),1/4),\
    ((0,4,2,1,0),-1/4),\
    ((1,0,1,3,4),-1/4),\
    ((1,0,1,4,3),1/4),\
    ((1,0,3,4,1),1/4),\
    ((1,0,4,3,1),-1/4),\
    ((1,1,0,3,4),1/4),\
    ((1,1,0,4,3),-1/4),\
    ((1,1,3,4,0),-1/4),\
    ((1,1,4,3,0),1/4),\
    ((1,3,0,1,4),1/4),\
    ((1,3,1,0,4),-1/4),\
    ((1,3,4,0,1),-1/4),\
    ((1,3,4,1,0),1/4),\
    ((1,4,0,1,3),-1/4),\
    ((1,4,1,0,3),1/4),\
    ((1,4,3,0,1),1/4),\
    ((1,4,3,1,0),-1/4)]
    tensors_coo.append((T_211_A1_3_metadata,el))

    return tensors_coo

def get_SU2_symT_D5_1p1p0(dtype=torch.float64, device='cpu'):
    pd=2
    D=5
    dims=(pd,D,D,D,D)
    tensors=[]
    
    # embedd results from D3 1p0 into D=5 tensor
    # {0,1,3}
    # {0,3,1}
    # WARNING: due to indexing convention we have to shift indices
    # to the right by the dimension of new irrep in front
    # 1p0 -> 1p1p0 => i -> i+dim(1)=i+2
    tensors_coo= get_SU2_symT_D3_1p0_coo()
    for tcoo in tensors_coo:
        # shift indices
        el_shift=[(tuple([e[0][0]]+[i+2 for i in e[0][1:]]), e[1]) for e in tcoo[1]]
        t= torch.zeros(dims, dtype=dtype, device=device)
        t= fill_from_sparse_coo(t, el_shift)
        tensors.append((tcoo[0],t))
    
    tensors_coo= get_SU2_symT_D5_1p1p0_coo()
    for tcoo in tensors_coo:
        t= torch.zeros(dims, dtype=dtype, device=device)
        t= fill_from_sparse_coo(t, tcoo[1])
        tensors.append((tcoo[0],t))

    return tensors